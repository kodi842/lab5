#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Функция генерации матрицы смежности
void createG(int** m, int n) {
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (i == j) {
                m[i][j] = 0;
            } else {
                int e = rand() % 2;
                m[i][j] = e;
                m[j][i] = e;
            }
        }
    }
}

// Функция вывода матрицы
void printM(int** m, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", m[i][j]);
        }
        printf("\n");
    }
}

// Функция вычисления размера графа (количество ребер)
int sizeG(int** m, int n) {
    int es = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (m[i][j] == 1) {
                es++;
            }
        }
    }
    return es;
}

// Функция поиска изолированных вершин
void findIS(int** m, int n) {
    printf("Изолированные вершины: ");
    int count = 0;
    for (int i = 0; i < n; i++) {
        int iso = 1;
        for (int j = 0; j < n; j++) {
            if (m[i][j] == 1) {
                iso = 0;
                break;
            }
        }
        if (iso) {
            printf("%d ", i);
            count++;
        }
    }
    if (count == 0) {
        printf("нет");
    }
    printf("\n");
}

// Функция поиска концевых вершин
void findEND(int** m, int n) {
    printf("Концевые вершины: ");
    int count = 0;
    for (int i = 0; i < n; i++) {
        int deg = 0;
        for (int j = 0; j < n; j++) {
            if (m[i][j] == 1) {
                deg++;
            }
        }
        if (deg == 1) {
            printf("%d ", i);
            count++;
        }
    }
    if (count == 0) {
        printf("нет");
    }
    printf("\n");
}

// Функция поиска доминирующих вершин
void findDOM(int** m, int n) {
    int mdeg = -1;
    for (int i = 0; i < n; i++) {
        int deg = 0;
        for (int j = 0; j < n; j++) {
            if (m[i][j] == 1) {
                deg++;
            }
        }
        if (deg > mdeg) {
            mdeg = deg;
        }
    }

    printf("Доминирующие вершины (степень %d): ", mdeg);
    int count = 0;
    for (int i = 0; i < n; i++) {
        int deg = 0;
        for (int j = 0; j < n; j++) {
            if (m[i][j] == 1) {
                deg++;
            }
        }
        if (deg == mdeg) {
            printf("%d ", i);
            count++;
        }
    }
    if (count == 0) {
        printf("нет");
    }
    printf("\n");
}

// Функция генерации матрицы инцидентности
void createMI(int** adj_m, int** inc_m, int n, int es) {
    int e_index = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (adj_m[i][j] == 1) {
                inc_m[i][e_index] = 1;
                inc_m[j][e_index] = 1;
                e_index++;
            }
        }
    }
}

// Функция вывода матрицы инцидентности
void printMI(int** m, int n, int es) {
    printf("Матрица инцидентности:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < es; j++) {
            printf("%d ", m[i][j]);
        }
        printf("\n");
    }
}

// Функция вычисления размера графа (количество ребер) по матрице инцидентности
int sizeGmi(int** m, int n, int es) {
    int count = 0;
    for (int j = 0; j < es; j++) {
        for (int i = 0; i < n; i++) {
            if (m[i][j] == 1) {
                count++;
                break;
            }
        }
    }
    return count;
}

// Функция поиска изолированных вершин по матрице инцидентности
void findIS_MI(int** m, int n, int es) {
    printf("Изолированные вершины (по матрице инцидентности): ");
    int count = 0;
    for (int i = 0; i < n; i++) {
        int iso = 1;
        for (int j = 0; j < es; j++) {
            if (m[i][j] == 1) {
                iso = 0;
                break;
            }
        }
        if (iso) {
            printf("%d ", i);
            count++;
        }
    }
    if (count == 0) {
        printf("нет");
    }
    printf("\n");
}

// Функция поиска концевых вершин по матрице инцидентности
void findEND_MI(int** m, int n, int es) {
    printf("Концевые вершины (по матрице инцидентности): ");
    int count = 0;
    for (int i = 0; i < n; i++) {
        int deg = 0;
        for (int j = 0; j < es; j++) {
            if (m[i][j] == 1) {
                deg++;
            }
        }
        if (deg == 1) {
            printf("%d ", i);
            count++;
        }
    }
    if (count == 0) {
        printf("нет");
    }
    printf("\n");
}

// Функция поиска доминирующих вершин по матрице инцидентности
void findDOM_MI(int** m, int n, int es) {
    int* degs = (int*)calloc(n, sizeof(int));
    int mdeg = -1;
    for (int j = 0; j < es; j++) {
        for (int i = 0; i < n; i++) {
            if (m[i][j] == 1) {
                degs[i]++;
                if (degs[i] > mdeg) {
                    mdeg = degs[i];
                }
            }
        }
    }

    printf("Доминирующие вершины (по матрице инцидентности, степень %d): ", mdeg);
    int count = 0;
    for (int i = 0; i < n; i++) {
        if (degs[i] == mdeg) {
            printf("%d ", i);
            count++;
        }
    }
    if (count == 0) {
        printf("нет");
    }
    printf("\n");
    free(degs);
}

int main() {
    int n;

    printf("Введите количество вершин графа: ");
    scanf("%d", &n);

    int** adj_m = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        adj_m[i] = (int*)malloc(n * sizeof(int));
    }

    createG(adj_m, n);

    printf("Матрица смежности для неориентированного графа:\n");
    printM(adj_m, n);

    int es = sizeG(adj_m, n);
    printf("Размер графа (количество ребер): %d\n", es);

    findIS(adj_m, n);
    findEND(adj_m, n);
    findDOM(adj_m, n);

    int** inc_m = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        inc_m[i] = (int*)calloc(es, sizeof(int));
    }

    createMI(adj_m, inc_m, n, es);
    printMI(inc_m, n, es);

    int inc_es = sizeGmi(inc_m, n, es);
    printf("Размер графа (количество ребер) по матрице инцидентности: %d\n", inc_es);

    findIS_MI(inc_m, n, es);
    findEND_MI(inc_m,
