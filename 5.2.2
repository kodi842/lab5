#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Функция для генерации матрицы смежности
void generate_adjacency_matrix(int** matrix, int size) {
    srand(time(NULL));
    for (int i = 0; i < size; i++) {
        for (int j = i; j < size; j++) {
            if (i == j) {
                matrix[i][j] = 0;
            } else {
                int edge = rand() % 2;
                matrix[i][j] = edge;
                matrix[j][i] = edge;
            }
        }
    }
}

// Функция для вывода матрицы смежности на экран
void print_adjacency_matrix(int** matrix, int size) {
    printf("Матрица смежности:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Функция для генерации матрицы инцидентности
int generate_incidence_matrix(int** adj_matrix, int** inc_matrix, int size) {
    int edge_count = 0;
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (adj_matrix[i][j] == 1) {
                inc_matrix[i][edge_count] = 1;
                inc_matrix[j][edge_count] = 1;
                edge_count++;
            }
        }
    }
    return edge_count;
}

// Функция для вывода матрицы инцидентности на экран
void print_incidence_matrix(int** matrix, int size, int edge_count) {
    printf("Матрица инцидентности:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < edge_count; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Функция для нахождения специальных вершин
void find_special_vertices(int** matrix, int size) {
    int* isolated = (int*)malloc(size * sizeof(int));
    int* terminal = (int*)malloc(size * sizeof(int));
    int* dominating = (int*)malloc(size * sizeof(int));

    int isolated_count = 0, terminal_count = 0, dominating_count = 0;

    for (int i = 0; i < size; i++) {
        int degree = 0;
        for (int j = 0; j < size; j++) {
            if (matrix[i][j] == 1) {
                degree++;
            }
        }
        if (degree == 0) {
            isolated[isolated_count++] = i;
        } else if (degree == 1) {
            terminal[terminal_count++] = i;
        } else if (degree == size - 1) {
            dominating[dominating_count++] = i;
        }
    }

    printf("Изолированные вершины: ");
    for (int i = 0; i < isolated_count; i++) {
        printf("%d ", isolated[i]);
    }
    printf("\n");

    printf("Концевые вершины: ");
    for (int i = 0; i < terminal_count; i++) {
        printf("%d ", terminal[i]);
    }
    printf("\n");

    printf("Доминирующие вершины: ");
    for (int i = 0; i < dominating_count; i++) {
        printf("%d ", dominating[i]);
    }
    printf("\n");

    free(isolated);
    free(terminal);
    free(dominating);
}

int main() {
    int size;
    printf("Введите размер матрицы: ");
    scanf("%d", &size);

    int** adjacency_matrix = (int**)malloc(size * sizeof(int*));
    int** incidence_matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        adjacency_matrix[i] = (int*)malloc(size * sizeof(int));
        incidence_matrix[i] = (int*)malloc(size * sizeof(int));
    }

    generate_adjacency_matrix(adjacency_matrix, size);
    print_adjacency_matrix(adjacency_matrix, size);

    int edge_count = generate_incidence_matrix(adjacency_matrix, incidence_matrix, size);
    print_incidence_matrix(incidence_matrix, size, edge_count);

    printf("Размер графа (число рёбер): %d\n", edge_count);

    find_special_vertices(adjacency_matrix, size);

    for (int i = 0; i < size; i++) {
        free(adjacency_matrix[i]);
        free(incidence_matrix[i]);
    }
    free(adjacency_matrix);
    free(incidence_matrix);

    return 0;
}
