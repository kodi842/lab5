#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 5
#define MAX_EDGES (SIZE * (SIZE - 1)) / 2

void generate_adjacency_matrix(int matrix[SIZE][SIZE]) {
    srand(time(NULL));
    for (int i = 0; i < SIZE; i++) {
        for (int j = i; j < SIZE; j++) {
            if (i == j) {
                matrix[i][j] = 0;
            } else {
                int edge = rand() % 2;
                matrix[i][j] = edge;
                matrix[j][i] = edge;
            }
        }
    }
}

void print_adjacency_matrix(int matrix[SIZE][SIZE]) {
    printf("Матрица смежности:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int generate_incidence_matrix(int adj_matrix[SIZE][SIZE], int inc_matrix[SIZE][MAX_EDGES]) {
    int edge_count = 0;
    for (int i = 0; i < SIZE; i++) {
        for (int j = i + 1; j < SIZE; j++) {
            if (adj_matrix[i][j] == 1) {
                inc_matrix[i][edge_count] = 1;
                inc_matrix[j][edge_count] = 1;
                edge_count++;
            }
        }
    }
    return edge_count;
}

void print_incidence_matrix(int matrix[SIZE][MAX_EDGES], int edge_count) {
    printf("Матрица инцидентности:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < edge_count; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

void find_special_vertices(int adj_matrix[SIZE][SIZE]) {
    int isolated[SIZE], terminal[SIZE], dominating[SIZE];
    int isolated_count = 0, terminal_count = 0, dominating_count = 0;

    for (int i = 0; i < SIZE; i++) {
        int degree = 0;
        for (int j = 0; j < SIZE; j++) {
            if (adj_matrix[i][j] == 1) {
                degree++;
            }
        }
        if (degree == 0) {
            isolated[isolated_count++] = i;
        } else if (degree == 1) {
            terminal[terminal_count++] = i;
        } else if (degree == SIZE - 1) {
            dominating[dominating_count++] = i;
        }
    }

    printf("Изолированные вершины: ");
    for (int i = 0; i < isolated_count; i++) {
        printf("%d ", isolated[i]);
    }
    printf("\n");

    printf("Концевые вершины: ");
    for (int i = 0; i < terminal_count; i++) {
        printf("%d ", terminal[i]);
    }
    printf("\n");

    printf("Доминирующие вершины: ");
    for (int i = 0; i < dominating_count; i++) {
        printf("%d ", dominating[i]);
    }
    printf("\n");
}

int main() {
    int adjacency_matrix[SIZE][SIZE] = {0};
    int incidence_matrix[SIZE][MAX_EDGES] = {0};

    generate_adjacency_matrix(adjacency_matrix);
    print_adjacency_matrix(adjacency_matrix);

    int edge_count = generate_incidence_matrix(adjacency_matrix, incidence_matrix);
    print_incidence_matrix(incidence_matrix, edge_count);

    printf("Размер графа (число рёбер): %d\n", edge_count);

    find_special_vertices(adjacency_matrix);

    return 0;
}
